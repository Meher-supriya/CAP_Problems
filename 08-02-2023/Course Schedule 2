class Solution {
    List<List<Integer>> adj = new ArrayList<>();
    public boolean iscycle(int src,List<List<Integer>> adj,boolean[] visited,HashSet<Integer> stack,ArrayList<Integer> l){
        visited[src]=true;
        stack.add(src);
        for(int neigh:adj.get(src)){
            if(!visited[neigh]){
                if(iscycle(neigh,adj,visited,stack,l)){
                    return true;
                }
            }
            else if(stack.contains(neigh)){
                return true;
            }
        }
        l.add(src);
        stack.remove(src);
    return false;
    }
    public int[] findOrder(int numCourses, int[][] prerequisites) {
        HashSet<Integer> stack = new HashSet<>();
        ArrayList<Integer> l= new ArrayList<>();
        boolean[] visited= new boolean[numCourses];
        int[] a= new int[numCourses];
        for(int i=0;i<numCourses;i++){
            adj.add(new ArrayList<>());
        }
        for(int i=0;i<prerequisites.length;i++){
            adj.get(prerequisites[i][0]).add(prerequisites[i][1]);
        }
        for(int i=0;i<adj.size();i++){
            if(visited[i]){
                continue;
            }
           if(iscycle(i,adj,visited,stack,l)){
               return new int[0];
           }
        }
        // Collections.reverse(l);
        for(int i=0;i<l.size();i++){
            a[i]=l.get(i);
        }
    return a;
    }
}
