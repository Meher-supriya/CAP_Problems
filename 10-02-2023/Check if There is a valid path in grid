class Solution {
    class pair{
        int row;
        int col;
        pair(int row,int col){
            this.row=row;
            this.col=col;
        }
    }
    int[][][] dirs={{{0, -1}, {0, 1}},
                {{-1, 0}, {1, 0}},
                {{0, -1}, {1, 0}},
                {{0, 1}, {1, 0}},
                {{0, -1}, {-1, 0}},
                {{0, 1}, {-1, 0}}};
    public boolean hasValidPath(int[][] grid) {
        Queue<pair> q= new LinkedList<>();
        boolean[][] visited =new boolean[grid.length][grid[0].length];
        q.add(new pair(0,0));
        visited[0][0]=true;
        while(!q.isEmpty()){
            int row=q.peek().row;
            int col=q.peek().col;
            q.poll();
            for(int[] dir:dirs[grid[row][col]-1]){
                int rv=row+dir[0];
                int cv=col+dir[1];
                if(rv<0 || cv<0 || rv>=grid.length || cv>=grid[0].length || visited[rv][cv]==true){
                    continue;
                }
                for(int[] dirv:dirs[grid[rv][cv]-1]){
                    int x=rv+dirv[0];
                    int y=cv+dirv[1];
                    if(x==row && y==col){
                        q.add(new pair(rv,cv));
                        visited[rv][cv]=true;
                    }
                    
                }
            }
        }
        return visited[grid.length-1][grid[0].length-1];
    }
}
