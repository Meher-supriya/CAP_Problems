class Solution {
    int[] offsetr={-1,0,1,0};
    int[] offsetc={0,-1,0,1};
    public boolean iscycle(char[][] grid,boolean[][] visited,int row,int col,int prer,int prec){
        visited[row][col]=true;
        for(int i=0;i<offsetr.length;i++){
            int rv=row+offsetr[i];
            int cv=col+offsetc[i];
            if(rv<0 || cv<0 || rv>=grid.length || cv>=grid[0].length || grid[rv][cv]!=grid[row][col])
                continue;
            if(rv==prer && cv==prec){
                continue;
            }
            if(visited[rv][cv]){
                return true;
            }
            if(iscycle(grid,visited,rv,cv,row,col)){
                return true;
            }
        }
        return false;
    }
    public boolean containsCycle(char[][] grid) {
        boolean[][] visited = new boolean[grid.length][grid[0].length];
        for(int i=0;i<grid.length;i++){
            for(int j=0;j<grid[0].length;j++){
                if(!visited[i][j]){
                    if(iscycle(grid,visited,i,j,-1,-1)){
                        return true;
                    }
                }
            }
        }
        return false;
    }
}
