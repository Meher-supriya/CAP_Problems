class Solution {
    class pair{
    int row;
    int col;
    int time;
    pair(int row,int col,int time){
        this.row=row;
        this.col=col;
        this.time=time;
        }
    }
    public int orangesRotting(int[][] grid) {
        int[][] visited = new int[grid.length][grid[0].length];
        int count=0;
        Queue<pair> q=new LinkedList<>();
        for(int i=0;i<grid.length;i++){
            for(int j=0;j<grid[0].length;j++){
                if(grid[i][j]==2){
                    visited[i][j]=2;
                    q.add(new pair(i,j,0));
                }
                else{
                    visited[i][j]=0;
                }
                if(grid[i][j]==1){
                    count+=1;
                }
            }
        }
        int offsetr[]={-1,1,0,0};
        int offsetc[]={0,0,-1,1};
        int z=0;
        int max_time=0;
        while(!q.isEmpty()){
            int r=q.peek().row;
            int c=q.peek().col;
            int t=q.peek().time;
            max_time=Math.max(max_time,t);
            q.poll();
            for(int i=0;i<offsetr.length;i++){
                int rv=r+offsetr[i];
                int cv=c+offsetc[i];
                // System.out.print(rv+" "+cv);
                if(rv<0 || cv<0 || rv>=grid.length || cv>=grid[0].length || grid[rv][cv]==0 || visited[rv][cv]==2)
                    continue;
                z+=1;
                visited[rv][cv]=2;
                q.add(new pair(rv,cv,t+1));

            }
        }
        // System.out.println(c+" "+z);
    return count==z?max_time:-1;
    }
}
