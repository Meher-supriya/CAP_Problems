class Solution {
    public boolean bfs(int[] color, int[][] graph, int src) {
        Queue<Integer> q=new LinkedList<>();
        q.add(src);
        color[src]=0;
        while(!q.isEmpty()){
            int temp=q.poll() ;
     for(int neigh:graph[temp]){
                if(color[neigh]==-1) {
                    color[neigh]=1-color[temp];
                    q.add(neigh);
                }
                else if(color[neigh]==color[temp]) {
                    return false;
                }
            }
        }
        return true;
    }
    boolean z;
    public boolean isBipartite(int[][] graph) {
        int[] color=new int[graph.length];
        Arrays.fill(color,-1) ;
        for(int i=0;i<graph.length;i++){
            if(color[i]==-1 && graph[i].length>0){
              
if(!bfs(color,graph,i)){
    return false;
}
            }
        }

        return true;
    }
}
