class Solution {
    int count=0;
    int[] offsetr={-1,0,1,0};
    int[] offsetc={0,1,0,-1};
    public void dfs(int[][] grid,int row,int col,int clr){
        grid[row][col]=-clr;
        count=0;
        for(int i=0;i<offsetr.length;i++){
            int rv=row+offsetr[i];
            int cv=col+offsetc[i];
            if(rv<0 || cv<0 || rv>=grid.length || cv>=grid[0].length || Math.abs(grid[rv][cv])!=clr)
                continue;
            count+=1;
            if(grid[rv][cv]!=-clr){
                dfs(grid,rv,cv,clr);   
            }
        }
        if(count==4){
            grid[row][col]=clr;
            System.out.println(row+" "+col+" "+clr+" "+grid[row][col]);
        }
    }
    public int[][] colorBorder(int[][] grid, int row, int col, int color) {
        int clrv=grid[row][col];
        dfs(grid,row,col,grid[row][col]);
        for(int i=0;i<grid.length;i++){
            for(int j=0;j<grid[0].length;j++){
                if(grid[i][j]==-clrv){
                    grid[i][j]=color;
                }
            }
        }
        return grid;
    }
}
